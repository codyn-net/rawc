#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>

typedef struct
{
	int id;
	char const *name;
} StateItem;

static StateItem states_map[] =
{
${statemap}
};

#define NUM_STATES (sizeof (states_map) / sizeof (StateItem))

static int
lookup_monitor (char const *name)
{
	int i;

	for (i = 0; i < NUM_STATES; ++i)
	{
		if (strcmp (states_map[i].name, name) == 0)
		{
			return states_map[i].id;
		}
	}

	return -1;
}

static void
print_states (FILE *f)
{
	int i;

	fprintf (f, "Available monitors:\n\n");

	for (i = 0; i < NUM_STATES; ++i)
	{
		fprintf (f, "%s\n", states_map[i].name);
	}
}

int
main (int argc, char *argv[])
{
	double from;
	double step;
	double to;
	unsigned int seed = 0;

	int monitors[255];
	int num_monitors = 0;

	if (argc == 2 && strcmp (argv[1], "list") == 0)
	{
		print_states (stdout);
		return 0;
	}

	if (argc != 4 && argc != 5)
	{
		printf ("Usage: %s <from> <step> <to> [<seed>]\n", argv[0]);
		printf ("\nThis program runs and monitors the CPG network.\n");
		printf ("Specify a time range to monitor (from step to) as arguments on the command line.\n");
		printf ("Optionally specify a random seed.\n");
		printf ("By default, a random seed will be generated and printed to stderr.\n");
		printf ("States to monitor can be specified (one per line) on standard in.\n");
		printf ("State values are written to standard out (tab separated).\n");
		printf ("Use `%s list' to show available states to monitor.\n\n", argv[0]);

		return 1;
	}

	from = atof (argv[1]);
	step = atof (argv[2]);
	to = atof (argv[3]);

	if (argc == 5)
	{
		seed = atoi (argv[4]);
	}
	else
	{
		FILE *file = fopen("/dev/urandom", "r");
		fread (&seed, sizeof (seed), 1, file);
		fclose (file);
		fprintf (stderr, "Seed: %u\n", seed);
	}

	if (to - (from + step) >= to - from)
	{
		fprintf (stderr, "Invalid simulation range specified...\n");
		return 1;
	}

	if (isatty (STDIN_FILENO))
	{
		fprintf (stdout, "Specify states to monitor (one per line, use `%s list' to list available monitors):\n", argv[0]);
	}

	char buffer[255];

	while (!feof (stdin))
	{
		if (!fgets (buffer, sizeof (buffer), stdin))
		{
			break;
		}

		if (buffer[strlen (buffer) - 1] == '\n')
		{
			buffer[strlen (buffer) - 1] = '\0';
		}

		if (strlen (buffer) == 0)
		{
			break;
		}

		// Lookup in table
		int id = lookup_monitor (buffer);

		if (id == -1)
		{
			fprintf (stderr, "\nCould not find state to monitor: %s\n\n", buffer);
			print_states (stderr);

			return 1;
		}

		if (num_monitors >= sizeof (monitors) / sizeof (monitors[0]))
		{
			fprintf (stderr, "Too many monitors specified, maximum number of monitors is %ld\n", sizeof (monitors));
			return 1;
		}

		monitors[num_monitors++] = id;
	}

	srand (seed);

	${name}_initialize ();
	${name}_set (${NAME}_STATE_T, from);

	to += step / 2;

	while (${name}_get (${NAME}_STATE_T) < to)
	{
		int i;

		for (i = 0; i < num_monitors; ++i)
		{
			if (i != 0)
			{
				printf ("\t");
			}

			printf ("%.15f", ${name}_get (monitors[i]));
		}

		if (num_monitors > 0)
		{
			printf ("\n");
		}

		${name}_step (step);
	}

	return 0;
}
